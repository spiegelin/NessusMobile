#version: '3.8'

services:
  scan-controller:
    build:
      context: ./scan
      dockerfile: Dockerfile
    container_name: scan-controller
    env_file:
      - .env
    ports:
      - "8000:8000"
    networks:
      - app-network
    
  express-backend:
    build:
      context: ./app
      dockerfile: Dockerfile-Express
    container_name: express-backend
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      - db
    env_file:
      - .env

  db:
    image: postgres:latest
    container_name: my_postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
  
  zap-scanner:
    image: zaproxy/zap-stable
    container_name: zap-scanner
    command: zap.sh -daemon -host 0.0.0.0 -port 8090 -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true -config api.key=${ZAP_API_KEY}
    ports:
      - "8090:8090"
    networks:
      - app-network
    environment:
      - JAVA_OPTS=-Xmx512m

  openvas-scanner:
    image: securecompliance/gvm
    container_name: openvas-scanner
    ports:
      - "9392:9392" # Web UI
      - "9390:9390" # GMP API
    platform: linux/amd64
    networks:
      - app-network
    volumes:
      - openvas_data:/data
    environment:
    - USERNAME=${OPENVAS_USER} 
    - PASSWORD=${OPENVAS_PASSWORD} 

volumes:
  postgres_data:
  openvas_data:

networks:
  app-network: